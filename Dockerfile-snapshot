FROM golang:1.24 AS builder

# define the build arguments
ARG GIT_VERSION
ARG GIT_COMMIT
ARG GIT_DATE

ENV GIT_VERSION=${GIT_VERSION}
ENV GIT_COMMIT=${GIT_COMMIT}
ENV GIT_DATE=${GIT_DATE}

# build everything
COPY . /.
RUN CGO_ENABLED=0 go build -o /amur -ldflags="-X 'main.version=${GIT_VERSION}' -X 'main.commit=${GIT_COMMIT}' -X 'main.date=${GIT_DATE}'" /.

FROM debian:bookworm AS packages

# create neccessary folder structure
RUN mkdir -p /export/usr/bin

# update apt and install dependencies
RUN apt-get update
RUN apt-get install -y webp ffmpeg

# copy WebP binaries
RUN cp /usr/bin/cwebp /export/usr/bin/
RUN cp /usr/bin/dwebp /export/usr/bin/
RUN cp /usr/bin/img2webp /export/usr/bin/
RUN cp /usr/bin/gif2webp /export/usr/bin/
RUN cp /usr/bin/vwebp /export/usr/bin/
RUN cp /usr/bin/webpinfo /export/usr/bin/
RUN cp /usr/bin/webpmux /export/usr/bin/

# copy ffmpeg binaries
RUN cp /usr/bin/ffmpeg /export/usr/bin/
RUN cp /usr/bin/ffprobe /export/usr/bin/

# copy libraries
RUN ldd /usr/bin/cwebp | awk '{print $3}' | grep '^/' | xargs -I '{}' cp --parents -v '{}' /export/
RUN cp --parents "$(ldd /usr/bin/cwebp | grep 'ld-linux' | awk '{print $1}')" /export/

RUN ldd /usr/bin/ffmpeg | awk '{print $3}' | grep '^/' | xargs -I '{}' cp --parents -v '{}' /export/
RUN cp --parents "$(ldd /usr/bin/ffmpeg | grep 'ld-linux' | awk '{print $1}')" /export/

RUN ldd /usr/bin/ffprobe | awk '{print $3}' | grep '^/' | xargs -I '{}' cp --parents -v '{}' /export/
RUN cp --parents "$(ldd /usr/bin/ffprobe | grep 'ld-linux' | awk '{print $1}')" /export/

FROM cgr.dev/chainguard/static@sha256:288b818c1b3dd89776d176f07f5f671b118fe836c4d80ec2cc3299b596fe71b7

# copy binary
COPY /amur /usr/bin/amur

# copy binaries and libraries
COPY --from=packages /export/ /

ENTRYPOINT ["/usr/bin/amur"]